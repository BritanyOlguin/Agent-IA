"""
Agente con sistema de paginaci√≥n interactiva para navegar grandes vol√∫menes de resultados.
Permite ver resultados de 100 en 100 con navegaci√≥n siguiente/anterior.
"""

import sys
from pathlib import Path
import math

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent))

from src.core.elasticsearch_engine import ElasticsearchEngine

class AgentePaginacion:
    """Agente con sistema de paginaci√≥n para grandes vol√∫menes de datos"""
    
    def __init__(self):
        self.engine = None
        self.total_docs = 0
        self.resultados_por_pagina = 100
        
        # Estado de navegaci√≥n
        self.ultima_consulta = ""
        self.pagina_actual = 1
        self.total_resultados = 0
        self.total_paginas = 0
        self.todos_resultados = []  # Cache de todos los resultados
        
        try:
            print("üîÑ Inicializando Elasticsearch...")
            self.engine = ElasticsearchEngine()
            
            # Verificar datos
            stats = self.engine.get_stats()
            self.total_docs = stats.get('total_documents', 0)
            
            if self.total_docs == 0:
                print("‚ö†Ô∏è No hay datos indexados. Ejecuta: python src/utils/elasticsearch_indexer.py")
            else:
                print(f"‚úÖ Conectado a Elasticsearch con {self.total_docs:,} registros")
                
        except Exception as e:
            print(f"‚ùå Error conectando a Elasticsearch: {e}")
    
    def buscar_nueva_consulta(self, consulta: str) -> bool:
        """Realiza una nueva b√∫squeda y prepara la paginaci√≥n"""
        if not self.engine:
            print("‚ùå Elasticsearch no est√° disponible")
            return False
        
        try:
            print(f"üîç Buscando: '{consulta}'")
            print("‚è≥ Obteniendo todos los resultados... (esto puede tomar unos segundos)")
            
            # Obtener TODOS los resultados de una vez (Elasticsearch maneja esto eficientemente)
            resultados = self.engine.search(consulta, max_results=10000)  # M√°ximo pr√°ctico
            
            if resultados['total'] == 0:
                print(f"‚ùå No se encontraron resultados para: '{consulta}'")
                return False
            
            # Guardar estado
            self.ultima_consulta = consulta
            self.todos_resultados = resultados['results']
            self.total_resultados = len(self.todos_resultados)
            self.total_paginas = math.ceil(self.total_resultados / self.resultados_por_pagina)
            self.pagina_actual = 1
            
            print(f"‚úÖ B√∫squeda completada en {resultados['took']}ms")
            print(f"üìä Total encontrados: {self.total_resultados:,} resultados")
            print(f"üìÑ Se mostrar√°n en {self.total_paginas} p√°ginas de {self.resultados_por_pagina} resultados cada una")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda: {str(e)}")
            return False
    
    def mostrar_pagina_actual(self):
        """Muestra la p√°gina actual de resultados"""
        if not self.todos_resultados:
            print("‚ùå No hay resultados para mostrar")
            return
        
        # Calcular √≠ndices de la p√°gina actual
        inicio = (self.pagina_actual - 1) * self.resultados_por_pagina
        fin = min(inicio + self.resultados_por_pagina, self.total_resultados)
        
        resultados_pagina = self.todos_resultados[inicio:fin]
        
        # Mostrar header de la p√°gina
        print("\n" + "="*80)
        print(f"üìÑ P√ÅGINA {self.pagina_actual} DE {self.total_paginas}")
        print(f"üîç Consulta: '{self.ultima_consulta}'")
        print(f"üìä Mostrando resultados {inicio + 1:,} al {fin:,} de {self.total_resultados:,} totales")
        print("="*80)
        
        # Mostrar resultados de esta p√°gina
        for i, resultado in enumerate(resultados_pagina, start=inicio + 1):
            print(f"\nüìã RESULTADO #{i:,} (Relevancia: {resultado['score']:.2f})")
            print(f"üìÅ Fuente: {resultado['fuente']}")
            
            # Mostrar datos del registro
            for campo, valor in resultado['data'].items():
                if campo not in ['fuente', 'fecha_indexado', 'id_original']:
                    campo_mostrar = campo.replace('_', ' ').title()
                    print(f"   {campo_mostrar}: {valor}")
        
        # Mostrar footer con navegaci√≥n
        print("\n" + "="*80)
        print(f"üìÑ P√ÅGINA {self.pagina_actual} DE {self.total_paginas} | Resultados {inicio + 1:,}-{fin:,} de {self.total_resultados:,}")
        
        # Mostrar opciones de navegaci√≥n
        opciones = []
        if self.pagina_actual > 1:
            opciones.append("'anterior' (p√°gina anterior)")
        if self.pagina_actual < self.total_paginas:
            opciones.append("'siguiente' (p√°gina siguiente)")
        opciones.extend([
            "'pagina X' (ir a p√°gina espec√≠fica)",
            "'pregunta' (nueva b√∫squeda)",
            "'salir' (terminar)"
        ])
        
        print("üß≠ NAVEGACI√ìN:")
        for opcion in opciones:
            print(f"   ‚Ä¢ {opcion}")
        print("="*80)
    
    def navegar_anterior(self) -> bool:
        """Va a la p√°gina anterior"""
        if self.pagina_actual > 1:
            self.pagina_actual -= 1
            print(f"‚¨ÖÔ∏è Navegando a p√°gina {self.pagina_actual}")
            return True
        else:
            print("‚ùå Ya est√°s en la primera p√°gina")
            return False
    
    def navegar_siguiente(self) -> bool:
        """Va a la p√°gina siguiente"""
        if self.pagina_actual < self.total_paginas:
            self.pagina_actual += 1
            print(f"‚û°Ô∏è Navegando a p√°gina {self.pagina_actual}")
            return True
        else:
            print("‚ùå Ya est√°s en la √∫ltima p√°gina")
            return False
    
    def ir_a_pagina(self, numero_pagina: int) -> bool:
        """Va a una p√°gina espec√≠fica"""
        if 1 <= numero_pagina <= self.total_paginas:
            self.pagina_actual = numero_pagina
            print(f"üéØ Navegando a p√°gina {self.pagina_actual}")
            return True
        else:
            print(f"‚ùå P√°gina inv√°lida. Debe estar entre 1 y {self.total_paginas}")
            return False
    
    def mostrar_ayuda(self):
        """Muestra ejemplos de consultas"""
        ejemplos = [
            "Adrian Lino",
            "Malva 101", 
            "telefono 6934463",
            "Aguascalientes",
            "ama de casa",
            "Alma Garcia",
            "CDMX",
            "Guadalupe",
            "zapopan",
            "sector juarez"
        ]
        
        print("\nüí° EJEMPLOS DE CONSULTAS:")
        for ejemplo in ejemplos:
            print(f"   üîç {ejemplo}")
        
        print("\n‚ú® CARACTER√çSTICAS:")
        print("   ‚úÖ Tolerancia a errores ortogr√°ficos")
        print("   ‚úÖ B√∫squeda parcial (ej: 'Adrian' encuentra 'Adrian Lino')")
        print("   ‚úÖ B√∫squeda por cualquier campo")
        print("   ‚úÖ Navegaci√≥n por p√°ginas de 100 resultados")
        print("   ‚úÖ Velocidad extrema (milisegundos)")
    
    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas del sistema y b√∫squeda actual"""
        if self.engine:
            stats = self.engine.get_stats()
            print(f"\nüìä ESTAD√çSTICAS DEL SISTEMA:")
            print(f"   üìÑ Total documentos en base: {stats.get('total_documents', 0):,}")
            print(f"   üíæ Tama√±o del √≠ndice: {stats.get('index_size', 0) / 1024 / 1024:.2f} MB")
            print(f"   ‚ö° Estado: {stats.get('status', 'desconocido')}")
            
            if self.ultima_consulta:
                print(f"\nüîç ESTAD√çSTICAS DE B√öSQUEDA ACTUAL:")
                print(f"   üéØ Consulta: '{self.ultima_consulta}'")
                print(f"   üìä Resultados encontrados: {self.total_resultados:,}")
                print(f"   üìÑ Total de p√°ginas: {self.total_paginas}")
                print(f"   üìç P√°gina actual: {self.pagina_actual}")
                print(f"   üìã Resultados por p√°gina: {self.resultados_por_pagina}")

def main():
    """Funci√≥n principal"""
    print("="*80)
    print("üöÄ AGENTE DE B√öSQUEDA CON PAGINACI√ìN INTERACTIVA")
    print("="*80)
    
    # Crear agente
    agente = AgentePaginacion()
    
    if not agente.engine:
        print("‚ùå No se pudo inicializar Elasticsearch")
        return
    
    print(f"üìä Base de datos: {agente.total_docs:,} registros disponibles")
    print(f"üìÑ Resultados por p√°gina: {agente.resultados_por_pagina}")
    
    # Mostrar ayuda inicial
    agente.mostrar_ayuda()
    
    print("\n" + "-"*80)
    print("üí¨ COMANDOS DISPONIBLES:")
    print("   üîç [consulta] - Nueva b√∫squeda")
    print("   ‚û°Ô∏è siguiente - P√°gina siguiente")
    print("   ‚¨ÖÔ∏è anterior - P√°gina anterior") 
    print("   üéØ pagina [n√∫mero] - Ir a p√°gina espec√≠fica")
    print("   üí° ayuda - Mostrar ejemplos")
    print("   üìä estadisticas - Ver estad√≠sticas")
    print("   üö™ salir - Terminar programa")
    print("-"*80)
    
    while True:
        try:
            comando = input("\nüéÆ Comando: ").strip().lower()
            
            if not comando:
                continue
            
            # Comandos de salida
            if comando in ['salir', 'exit', 'quit']:
                print("\nüëã ¬°Hasta luego!")
                break
            
            # Comandos de ayuda
            elif comando in ['ayuda', 'help']:
                agente.mostrar_ayuda()
            
            # Estad√≠sticas
            elif comando in ['estadisticas', 'stats']:
                agente.mostrar_estadisticas()
            
            # Navegaci√≥n - siguiente
            elif comando in ['siguiente', 'next', 'sig']:
                if agente.navegar_siguiente():
                    agente.mostrar_pagina_actual()
                    
            # Navegaci√≥n - anterior
            elif comando in ['anterior', 'prev', 'ant']:
                if agente.navegar_anterior():
                    agente.mostrar_pagina_actual()
            
            # Ir a p√°gina espec√≠fica
            elif comando.startswith('pagina '):
                try:
                    numero = int(comando.split('pagina ')[1])
                    if agente.ir_a_pagina(numero):
                        agente.mostrar_pagina_actual()
                except (ValueError, IndexError):
                    print("‚ùå Formato incorrecto. Usa: pagina [n√∫mero]")
            
            # Nueva b√∫squeda
            else:
                # Tratar como nueva consulta
                if agente.buscar_nueva_consulta(comando):
                    agente.mostrar_pagina_actual()
            
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo...")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main()